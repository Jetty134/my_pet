import telebot
from telebot import types
import random
import time
import requests
from bs4 import BeautifulSoup


token = '8024942469:AAFfNT4TWBsRTJiAkR8l_RotZ2DkocsgQfo'
bot = telebot.TeleBot(token=token)

name = ''
energy = 100
satiety = 100
hapiness = 100
remind = []
kw = ''



def feed():
    global satiety, energy, hapiness
    satiety += 15
    energy += 22
    hapiness += 11

def play():
    global satiety, energy, hapiness
    satiety -= 33
    energy -= 50
    hapiness += 10

def sleep():
    global satiety, energy, hapiness
    satiety -= 26
    energy += 44
    hapiness -= 32




def check(message):
    global satiety, energy, hapiness
    if satiety <= 0:
        bot.send_message(message.chat.id, f'{name} —É–º–µ—Ä –æ—Ç –≥–æ–ª–æ–¥–∞. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞!')
    elif satiety >= 10:
        bot.send_message(message.chat.id, f'{name} –Ω–∞–µ–ª—Å—è –∏ —Å—á–∞—Å—Ç–ª–∏–≤!')
    if hapiness < 0:
        bot.send_message(message.chat.id, f'{name} —É–º–µ—Ä –æ—Ç —Ç–æ—Å–∫–∏. –° –ø–∏—Ç–æ–º—Ü–µ–º –Ω—É–∂–Ω–æ —á–∞—â–µ –∏–≥—Ä–∞—Ç—å!')
    elif hapiness > 100:
        bot.send_message(message.chat.id, f'{name} —Å—á–∞—Å—Ç–ª–∏–≤ –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞')
    if energy < 70:
        bot.send_message(message.chat.id, f'{name}) —É–º–µ—Ä –æ—Ç –∏—Å—Ç–æ—â–µ–Ω–∏—è.')
    elif energy > 70:
        bot.send_message(message.chat.id, f'{name} –ø–æ–ª–æ–Ω —Å–∏–ª –∏ —ç–Ω–µ—Ä–≥–∏–∏!!!')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ç–∞–º–∞–≥–æ—á–∏, —á–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?')
    keyboard = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton('/feed')
    item2 = types.KeyboardButton('/play')
    item3 = types.KeyboardButton('/sleep')
    item4 = types.KeyboardButton('/number')
    item5 = types.KeyboardButton('/startremind')
    item6 = types.KeyboardButton('/play_with_me')
    item7 = types.KeyboardButton('/name')
    item8 = types.KeyboardButton('/remind_me')
    item9 = types.KeyboardButton('/remind')
    item10 = types.KeyboardButton('/history')
    item11 = types.KeyboardButton('/startplay')
    keyboard.add(item1, item2 ,item3 ,item4 ,item5 ,item6 ,item7 ,item8 ,item9, item10, item11)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É.', reply_markup=keyboard)

@bot.message_handler(commands=['feed'])
def f(message):
    feed()
    check(message)


@bot.message_handler(commands=['play'])
def p(message):
    play()
    check(message)



@bot.message_handler(commands=['sleep'])
def s(message):
    sleep()
    check(message)


@bot.message_handler(commands=['play_with_me'])
def f(message):
    emoji_to_choice = {
        '‚úÇÔ∏è': '–Ω–æ–∂–Ω–∏—Ü—ã',
        'üìÑ': '–±—É–º–∞–≥–∞',
        'ü™®': '–∫–∞–º–µ–Ω—å'
    }

    choice_to_emoji = {
        '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è',
        '–±—É–º–∞–≥–∞': 'üìÑ',
        '–∫–∞–º–µ–Ω—å': 'ü™®'
    }

    @bot.message_handler(commands=['startplay'])
    def start(message):
        bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞! –ù–∞–∂–º–∏ /play2 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')

    @bot.message_handler(commands=['play2'])
    def play(message):
        markup = types.ReplyKeyboardMarkup(row_width=3)
        item1 = types.KeyboardButton('‚úÇÔ∏è')
        item2 = types.KeyboardButton('üìÑ')
        item3 = types.KeyboardButton('ü™®')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:', reply_markup=markup)

    def determine_winner(user_choice, bot_choice):
        if user_choice == bot_choice:
            return '–Ω–∏—á—å—è'
        elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
                (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
                (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
            return '–∏–≥—Ä–æ–∫'
        else:
            return '–±–æ—Ç'

    @bot.message_handler(content_types=['text'])
    def handle_choice(message):
        if message.text not in emoji_to_choice:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã.')
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
        user_emoji = message.text
        user_choice = emoji_to_choice[user_emoji]

        # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        bot_choice = random.choice(list(choice_to_emoji.keys()))
        bot_emoji = choice_to_emoji[bot_choice]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        result = determine_winner(user_choice, bot_choice)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"""
    üéÆ –í–∞—à —Ö–æ–¥: {user_emoji} ({user_choice})
    ü§ñ –ú–æ–π —Ö–æ–¥: {bot_emoji} ({bot_choice})
    """

        if result == '–∏–≥—Ä–æ–∫':
            response += "üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        elif result == '–±–æ—Ç':
            response += "üí• –Ø –ø–æ–±–µ–¥–∏–ª!"
        else:
            response += "ü§ù –ù–∏—á—å—è!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())




@bot.message_handler(commands=['name'])
def name2(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞: ')
    bot.register_next_step_handler(message, second_step)
def second_step(message):
    global name
    name = message.text

@bot.message_handler(commands=['remind_me'])
def r(message):
    @bot.message_handler(commands=['startremind'])
    def start(message):
        bot.reply_to(message,
                     '–ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å  –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /history –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /remind , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

    @bot.message_handler(commands=['history'])
    def h(message):
        global remind
        for i in remind:
            bot.send_message(message.chat.id, i)

    @bot.message_handler(commands=['remind'])
    def set_reminder(message):
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∞–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å?')
        bot.register_next_step_handler(message, second_step)

    def second_step(message):
        global remind
        r = message.text
        remind.append(r)
        bot.send_message(message.chat.id, '–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?')
        bot.register_next_step_handler(message, third_step, r)

    def third_step(message, r):
        t = int(message.text)
        chat_id = message.chat.id
        time.sleep(t)
        bot.send_message(chat_id, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!!!' + r)

    @bot.message_handler(commands=['history'])
    def h(message):
        global remind
        for i in remind:
            bot.send_message(message.chat.id, i)



@bot.message_handler(commands=['number'])
def n(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç: ')
    bot.register_next_step_handler(message, second_step1)
def second_step1(message):
    global kw
    kw = message.text
    url = f'http://numbersapi.com/{kw}/trivia?fragment'
    response = requests.get(url + kw)
    bot.send_message(message.chat.id,response.text)



bot.polling()
